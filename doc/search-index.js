var searchIndex={};
searchIndex["denoise_s1"] = {"doc":"","i":[[4,"OpModes","denoise_s1","",null,null],[13,"LinearEst","","",0,null],[13,"LinearApply","","",0,null],[13,"Raw","","",0,null],[13,"LPEst","","",0,null],[13,"LPApply","","",0,null],[5,"check_path","","",null,[[["str"]],[["result",["file"]],["file"]]]],[5,"parse_multi","","Parse multilooking options",null,[[["str"],["option",["str"]]],["option"]]],[5,"main","","",null,[[],["result"]]],[5,"write_arrayf64","","",null,[[["str"],["arrayview",["f64"]],["file"],["f64"],["dimension"],["option"]],["result"]]],[5,"write_arrayu16","","",null,[[["str"],["option"],["file"],["u16"],["arrayview",["u16"]],["dimension"]],["result"]]],[5,"linear_get_dualpol_data","","",null,[[["str"],["file"],["option",["str"]],["option"]],["result"]]],[5,"read_k","","",null,[[["file"]],[["array1",["f64"]],["result",["array1"]]]]],[5,"linear_get_customscale_data","","",null,[[["str"],["result",["file"]],["file"],["option"]],["result"]]],[5,"linear_get_raw_data","","",null,[[["str"],["file"],["option"]],["result"]]],[5,"lp_get_dualpol_data","","",null,[[["str"],["option"],["file"],["option",["str"]],["bool"]],["result"]]],[5,"read_mb","","",null,[[["file"]],["result"]]],[5,"lp_get_customscale_data","","",null,[[["str"],["result",["file"]],["file"],["option",["str"]],["option"]],["result"]]],[6,"Ml","","",null,null],[11,"variants","","",0,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from_py","","",0,[[["python"],["t"]],["t"]]],[11,"into_py","","",0,[[["python"]],["u"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result"]]]],"p":[[4,"OpModes"]]};
searchIndex["s1_noisefloor"] = {"doc":"","i":[[0,"py_interface","s1_noisefloor","Python interface to methods.",null,null],[5,"PyInit_s1_noisefloor","s1_noisefloor::py_interface","This autogenerated function is called by the python…",null,[[]]],[0,"c_interface","s1_noisefloor","Entry point for denoising zip file from C api Under…",null,null],[3,"LinearResult","s1_noisefloor::c_interface","Struct for holding results from Linear results crosspol:…",null,null],[3,"RawResult","","struct for holding raw results. crosspol: pointer to…",null,null],[3,"LPResult","","Struct for holding results from Linear results crosspol:…",null,null],[3,"SimpleArray2D","","Simple array structure for multilook processing Assumes…",null,null],[5,"linear_get_dualpol_data","","Applies the lstsquares estimation method to retrieve…",null,[[["usize"]],["linearresult"]]],[5,"linear_get_customscale_data","","Applies the linear scaling method using custom user…",null,[[["usize"]],["linearresult"]]],[5,"linear_get_raw_data","","Returns the original cross pol, co pol, and noise field…",null,[[["usize"]],["rawresult"]]],[5,"lp_get_dualpol_data","","Applies the linear programming method to restimate a noise…",null,[[["usize"],["u8"]],["lpresult"]]],[5,"lp_get_customscale_data","","Applies the power function noise floor obtained from…",null,[[["usize"]],["lpresult"]]],[5,"post_multilook_and_floor","","Applies multilooking to the input image, sets negative…",null,[[["usize"]],["simplearray2d"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from_py","","",0,[[["python"],["t"]],["t"]]],[11,"into_py","","",0,[[["python"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from_py","","",1,[[["python"],["t"]],["t"]]],[11,"into_py","","",1,[[["python"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from_py","","",2,[[["python"],["t"]],["t"]]],[11,"into_py","","",2,[[["python"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from_py","","",3,[[["python"],["t"]],["t"]]],[11,"into_py","","",3,[[["python"]],["u"]]]],"p":[[3,"LinearResult"],[3,"RawResult"],[3,"LPResult"],[3,"SimpleArray2D"]]};
searchIndex["s1_noisefloor_engine"] = {"doc":"Backbone engine for Sentinel-1 noise floor removal. Main…","i":[[0,"parse","s1_noisefloor_engine","Module is responsible for extracting data directly from…",null,null],[3,"NoiseField","s1_noisefloor_engine::parse","",null,null],[12,"data","","",0,null],[3,"SwathElem","","",null,null],[12,"fa","","",1,null],[12,"la","","",1,null],[12,"fr","","",1,null],[12,"lr","","",1,null],[3,"TimeRow","","",null,null],[12,"row","","",2,null],[12,"col","","",2,null],[12,"elevangle","","",2,null],[12,"aztime","","",2,null],[3,"TimeRowLut","","",null,null],[12,"lut","","",3,null],[3,"BurstEntry","","",null,null],[12,"fa","","",4,null],[12,"la","","",4,null],[12,"fr","","",4,null],[12,"lr","","",4,null],[3,"RawPattern","","",null,null],[12,"angle","","",5,null],[12,"pattern","","",5,null],[3,"HyperParams","","Hyper parameters for the LP method.",null,null],[12,"box_l","","",6,null],[12,"add_pad","","",6,null],[12,"affine_lowpad","","",6,null],[12,"affine_highpad","","",6,null],[12,"affine_var_norm","","",6,null],[12,"burst_padding","","",6,null],[12,"scs_normalize","","",6,null],[12,"scs_scale","","",6,null],[12,"scs_rho_x","","",6,null],[12,"scs_max_iters","","",6,null],[12,"scs_eps","","",6,null],[12,"scs_cg_rate","","",6,null],[12,"scs_verbose","","",6,null],[3,"LinearConfig","","Linear parameters for linear rescaling method.",null,null],[12,"mu","","",7,null],[12,"gamma","","",7,null],[12,"lambda","","",7,null],[12,"lambda2","","",7,null],[11,"new","","Creates a new noise field given the xml file",0,[[["str"],["bool"]],["noisefield"]]],[11,"compute_azimuth_field","","Computes only the azimuth magnitude in the noise field",0,[[["str"]],[["array2",["f64"]],["f64"]]]],[11,"new","","Creates an nested vector of swath elems and the period for…",1,[[["str"],["sentinelformatid"]]]],[11,"new","","Return a full lookup table",3,[[["str"],["vec"],["sentinelformatid"]],["timerowlut"]]],[11,"interp_angle_to_col","","Return a closure that is applied to interpolate the values.",3,[[["self"]],[["fn"],["box",["fn"]]]]],[11,"create_burst_coords","","",4,[[["str"],["timerowlut"],["vec"],["sentinelformatid"]],[["vec",["vec"]],["vec",["arc"]]]]],[11,"new","","",5,[[["str"],["sentinelformatid"]],["rawpattern"]]],[11,"default","","Default parameters if no config file specified",6,[[],["hyperparams"]]],[11,"parse_config","","Extract parameters from config file.",6,[[["str"]],[["hyperparams"],["string"],["result",["hyperparams","string"]]]]],[11,"get_scs","","Extract scs settings from hyper.",6,[[["self"]],["lp_scs_settings"]]],[11,"default","","",7,[[],["linearconfig"]]],[11,"parse_config","","Get parameters from ini files.",7,[[["str"]],[["string"],["result",["linearconfig","string"]],["linearconfig"]]]],[0,"apply","s1_noisefloor_engine","Methods used to apply and subtract estimated noisefields",null,null],[3,"LpApply","s1_noisefloor_engine::apply","Methods for implementing linear programming application",null,null],[5,"apply_swath_scale","","Applies subswath noise subtraction scaling",null,[[["arrayview2",["f64"]],["arrayview1",["f64"]],["f64"],["arrayviewmut2",["f64"]]]]],[5,"prep_measurement","","Prepares square measurements from original image.",null,[[["arrayview2",["u16"]],["u16"],["f64"],["arrayviewmut2",["f64"]]],[["array2",["f64"]],["f64"]]]],[5,"restore_scale","","Apply square root (deprecated)",null,[[["f64"],["arrayviewmut2",["f64"]]]]],[5,"convert_to_u16_f32","","Convert u16 to f32 array",null,[[["arrayview2",["u16"]],["u16"]],[["array2",["f32"]],["f32"]]]],[5,"convert_to_f64_f32","","Convert f64 to f32 array",null,[[["arrayview2",["f64"]],["f64"]],[["array2",["f32"]],["f32"]]]],[11,"apply_lp_noisefield","","Applies the power function noise floor without affine…",8,[[["vec"],["hyperparams"],["sentinelformatid"],["arc",["twodarray"]],["arc",["vec"]],["vec",["arrtoarr"]],["vec",["vec"]],["midpoint"],["twodarray"],["vec",["vec"]],["vec"],["arc",["hyperparams"]]]]],[11,"compute_weights_for_affine","","Premptively compute weights using the original array.",8,[[["vec"],["sentinelformatid"],["twodarray"],["arc",["hyperparams"]],["hyperparams"]],[["vec",["f64"]],["vec",["vec"]]]]],[11,"apply_affine","","",8,[[["vec"],["sentinelformatid"],["arc",["twodarray"]],["arc",["vec"]],["vec",["vec"]],["vec",["f64"]],["vec",["vec"]],["twodarray"],["arc",["hyperparams"]],["hyperparams"]]]],[0,"read_from_archive","s1_noisefloor_engine","Module for reading from sentinel-1 zip archive.",null,null],[3,"SentinelFormatId","s1_noisefloor_engine::read_from_archive","",null,null],[12,"sentmode","","",9,null],[12,"quality","","",9,null],[3,"LpAttributes","","",null,null],[12,"bt","","",10,null],[12,"mp_dict","","",10,null],[12,"split_indices","","",10,null],[12,"eval_mp_dict","","",10,null],[12,"eval_split_indices","","",10,null],[12,"id","","",10,null],[12,"az_noise","","",10,null],[4,"SentinelArchiveOutput","","",null,null],[13,"CrossPolOutput","","",11,null],[13,"BothPolOutput","","",11,null],[5,"get_id_prefix","","Get the dateid prefix for the relevant files. ex:…",null,[[["str"]],[["sentinelformatid"],["option",["sentinelformatid"]]]]],[5,"get_data_from_zip_path","","Gets the original 16-bit image and noise field from a…",null,[[["str"],["bool"]],[["sentinelarchiveoutput"],["string"],["result",["sentinelarchiveoutput","string"]]]]],[11,"create_crosspol_annotation","","",9,[[["self"]],["string"]]],[11,"create_crosspol_noise","","",9,[[["self"]],["string"]]],[0,"interface","s1_noisefloor_engine","Interface for applying the methods in specific cases.",null,null],[5,"linear_get_dualpol_data","s1_noisefloor_engine::interface","Applies the lstsquares estimation method to retrieve…",null,[[["str"],["linearconfig"]],[["result",["string"]],["string"]]]],[5,"linear_get_customscale_data","","Applies the linear scaling method using custom user…",null,[[["str"],["arrayview1",["f64"]],["f64"]],[["result",["string"]],["string"]]]],[5,"linear_get_raw_data","","Returns the original cross pol, co pol, and noise field…",null,[[["str"]],[["result",["string"]],["string"]]]],[5,"lp_get_dualpol_data","","Applies the linear programming method to restimate a noise…",null,[[["str"],["linearconfig"],["hyperparams"],["bool"]],[["string"],["result",["string"]]]]],[5,"lp_get_customscale_data","","Applies the power function noise floor obtained from…",null,[[["str"],["usize"],["hyperparams"]],[["result",["string"]],["string"]]]],[0,"prep_lp","s1_noisefloor_engine","Top level module for preparing measurements for the linear…",null,null],[3,"TwoDArray","s1_noisefloor_engine::prep_lp","",null,null],[12,"rows","","",12,null],[12,"cols","","",12,null],[4,"MidPoint","","",null,null],[13,"Est","","",13,null],[13,"Test","","",13,null],[5,"get_interpolation_pattern","","Returns a dictionary that provides the antenna values.…",null,[[["str"],["vec"],["timerowlut"],["sentinelformatid"],["rawpattern"],["bool"]]]],[5,"select_and_estimate_segments","","Processes the segments in the splits/ bursts and returns…",null,[[["vec"],["sentinelformatid"],["arc",["twodarray"]],["vec",["arrtoarr"]],["vec",["vec"]],["vec",["f64"]],["midpoint"],["twodarray"],["vec",["vec"]],["arc",["hyperparams"]],["hyperparams"]],[["vec",["vec"]],["vec",["lin_params"]]]]],[5,"compute_mino_list","","Compute the minimum available value from the baseline…",null,[[["vec"],["sentinelformatid"],["arc",["twodarray"]],["twodarray"],["arc",["hyperparams"]],["hyperparams"]],[["vec",["f64"]],["vec",["vec"]]]]],[6,"ArrToArr","","",null,null],[11,"zeros","","",12,[[["usize"]],["twodarray"]]],[11,"from_ndarray","","",12,[[["array2",["f64"]],["f64"]],["twodarray"]]],[11,"to_raw_pointer","","",12,[[["self"]]]],[11,"from_vec","","",12,[[["vec",["f64"]],["usize"],["f64"]],["twodarray"]]],[11,"to_ndarray","","",12,[[["self"]],[["arrayview",["f64","ix2"]],["f64"],["ix2"]]]],[0,"est_lp","s1_noisefloor_engine","Estimation method specific to linear programming method",null,null],[3,"lin_params","s1_noisefloor_engine::est_lp","",null,null],[12,"m","","",14,null],[12,"b","","",14,null],[3,"lp_scs_settings","","",null,null],[12,"normalize","","",15,null],[12,"scale","","",15,null],[12,"rho_x","","",15,null],[12,"max_iters","","",15,null],[12,"eps","","",15,null],[12,"cg_rate","","",15,null],[12,"verbose","","",15,null],[5,"solve_lp","","Sets up linear program to be solved in SCS. * `lreal`-…",null,[[["arc",["hyperparams"]],["hyperparams"]],["lin_params"]]],[5,"scs_solve_lp","","",null,null],[0,"estimate","s1_noisefloor_engine","Estimation procedures specific to linear method.",null,null],[5,"estimate_k_values","s1_noisefloor_engine::estimate","Estimates k values for square of image x and noise field y…",null,[[["arrayview2",["f64"]],["f64"]],[["array1",["f64"]],["f64"]]]],[0,"postprocess","s1_noisefloor_engine","Routines for post processing the scene (e.g. multilooking,…",null,null],[5,"multilook_and_floor","s1_noisefloor_engine::postprocess","Applies multilook processing and flooring negative input…",null,[[["usize"],["arc",["twodarray"]],["twodarray"]],["twodarray"]]],[11,"from","s1_noisefloor_engine::parse","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from_py","","",0,[[["python"],["t"]],["t"]]],[11,"into_py","","",0,[[["python"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from_py","","",1,[[["python"],["t"]],["t"]]],[11,"into_py","","",1,[[["python"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from_py","","",2,[[["python"],["t"]],["t"]]],[11,"into_py","","",2,[[["python"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from_py","","",3,[[["python"],["t"]],["t"]]],[11,"into_py","","",3,[[["python"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from_py","","",4,[[["python"],["t"]],["t"]]],[11,"into_py","","",4,[[["python"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from_py","","",5,[[["python"],["t"]],["t"]]],[11,"into_py","","",5,[[["python"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from_py","","",6,[[["python"],["t"]],["t"]]],[11,"into_py","","",6,[[["python"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from_py","","",7,[[["python"],["t"]],["t"]]],[11,"into_py","","",7,[[["python"]],["u"]]],[11,"from","s1_noisefloor_engine::apply","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from_py","","",8,[[["python"],["t"]],["t"]]],[11,"into_py","","",8,[[["python"]],["u"]]],[11,"from","s1_noisefloor_engine::read_from_archive","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from_py","","",9,[[["python"],["t"]],["t"]]],[11,"into_py","","",9,[[["python"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from_py","","",10,[[["python"],["t"]],["t"]]],[11,"into_py","","",10,[[["python"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from_py","","",11,[[["python"],["t"]],["t"]]],[11,"into_py","","",11,[[["python"]],["u"]]],[11,"from","s1_noisefloor_engine::prep_lp","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from_py","","",12,[[["python"],["t"]],["t"]]],[11,"into_py","","",12,[[["python"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from_py","","",13,[[["python"],["t"]],["t"]]],[11,"into_py","","",13,[[["python"]],["u"]]],[11,"from","s1_noisefloor_engine::est_lp","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from_py","","",14,[[["python"],["t"]],["t"]]],[11,"into_py","","",14,[[["python"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from_py","","",15,[[["python"],["t"]],["t"]]],[11,"into_py","","",15,[[["python"]],["u"]]],[11,"clone","s1_noisefloor_engine::parse","",2,[[["self"]],["timerow"]]],[11,"clone","","",4,[[["self"]],["burstentry"]]],[11,"clone","s1_noisefloor_engine::est_lp","",14,[[["self"]],["lin_params"]]],[11,"clone","","",15,[[["self"]],["lp_scs_settings"]]],[11,"fmt","s1_noisefloor_engine::parse","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","s1_noisefloor_engine::read_from_archive","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","s1_noisefloor_engine::prep_lp","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","s1_noisefloor_engine::est_lp","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"index","s1_noisefloor_engine::prep_lp","column major order",12,[[["self"]],["f64"]]],[11,"index_mut","","",12,[[["self"]]]]],"p":[[3,"NoiseField"],[3,"SwathElem"],[3,"TimeRow"],[3,"TimeRowLut"],[3,"BurstEntry"],[3,"RawPattern"],[3,"HyperParams"],[3,"LinearConfig"],[3,"LpApply"],[3,"SentinelFormatId"],[3,"LpAttributes"],[4,"SentinelArchiveOutput"],[3,"TwoDArray"],[4,"MidPoint"],[3,"lin_params"],[3,"lp_scs_settings"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);